// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurveyManagement.Infrastructure.Data;

#nullable disable

namespace SurveyManagement.Infrastructure.Migrations
{
    [DbContext(typeof(SurveyDbContext))]
    partial class SurveyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Option", b =>
                {
                    b.Property<Guid>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = new Guid("f10759ab-87c2-462c-9115-9b8ed43d4dde"),
                            Description = "Description A",
                            Name = "Product A"
                        },
                        new
                        {
                            ProductId = new Guid("ae38f26b-ff84-4569-bea1-cfe210becda4"),
                            Description = "Description B",
                            Name = "Product B"
                        },
                        new
                        {
                            ProductId = new Guid("f02d136d-e7c6-4881-bb7a-c43070c179c3"),
                            Description = "Description C",
                            Name = "Product C"
                        },
                        new
                        {
                            ProductId = new Guid("87c332a2-87d3-4788-9cbc-0dd540c59e87"),
                            Description = "Description D",
                            Name = "Product D"
                        },
                        new
                        {
                            ProductId = new Guid("c97446f9-f252-44d4-b6a9-36e7a9f3720f"),
                            Description = "Description E",
                            Name = "Product E"
                        });
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Response", b =>
                {
                    b.Property<Guid>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserSurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ResponseId");

                    b.HasIndex("OptionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserSurveyId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Survey", b =>
                {
                    b.Property<Guid>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurveyId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("921fe07b-8706-4a4d-b14a-67d3f656019c"),
                            CreatedAt = new DateTime(2025, 9, 29, 5, 30, 27, 928, DateTimeKind.Utc),
                            Email = "admin1@example.com",
                            PasswordHash = "hash1",
                            Role = 0,
                            Username = "admin1"
                        },
                        new
                        {
                            UserId = new Guid("b0b2ef16-cfb4-4e46-bb57-a81dc9889fe6"),
                            CreatedAt = new DateTime(2025, 9, 29, 5, 30, 27, 928, DateTimeKind.Utc),
                            Email = "user1@example.com",
                            PasswordHash = "hash2",
                            Role = 1,
                            Username = "user1"
                        },
                        new
                        {
                            UserId = new Guid("dfde638b-5f4e-4f12-8f77-42125f5224a1"),
                            CreatedAt = new DateTime(2025, 9, 29, 5, 30, 27, 928, DateTimeKind.Utc),
                            Email = "user2@example.com",
                            PasswordHash = "hash3",
                            Role = 1,
                            Username = "user2"
                        },
                        new
                        {
                            UserId = new Guid("4536d792-7ece-49f4-96d9-7be228ab6a09"),
                            CreatedAt = new DateTime(2025, 9, 29, 5, 30, 27, 928, DateTimeKind.Utc),
                            Email = "user3@example.com",
                            PasswordHash = "hash4",
                            Role = 1,
                            Username = "user3"
                        },
                        new
                        {
                            UserId = new Guid("7e595c7f-1e5b-4b17-9692-a4df53985a1e"),
                            CreatedAt = new DateTime(2025, 9, 29, 5, 30, 27, 928, DateTimeKind.Utc),
                            Email = "user4@example.com",
                            PasswordHash = "hash5",
                            Role = 1,
                            Username = "user4"
                        });
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserProfileId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            UserProfileId = new Guid("b537dc63-cac6-4baf-b0d3-c20ba4d04db4"),
                            Address = "Admin Address",
                            FirstName = "Admin",
                            LastName = "One",
                            Phone = "1111111111",
                            UserId = new Guid("921fe07b-8706-4a4d-b14a-67d3f656019c")
                        },
                        new
                        {
                            UserProfileId = new Guid("9cf17099-7275-471f-8822-af8cc92ddc7c"),
                            Address = "User1 Address",
                            FirstName = "User",
                            LastName = "One",
                            Phone = "2222222222",
                            UserId = new Guid("b0b2ef16-cfb4-4e46-bb57-a81dc9889fe6")
                        },
                        new
                        {
                            UserProfileId = new Guid("b7b2c4dc-04d4-46db-b637-552a02d7140b"),
                            Address = "User2 Address",
                            FirstName = "User",
                            LastName = "Two",
                            Phone = "3333333333",
                            UserId = new Guid("dfde638b-5f4e-4f12-8f77-42125f5224a1")
                        },
                        new
                        {
                            UserProfileId = new Guid("9a9b26c2-072f-4457-a2d4-ee61f00ba816"),
                            Address = "User3 Address",
                            FirstName = "User",
                            LastName = "Three",
                            Phone = "4444444444",
                            UserId = new Guid("4536d792-7ece-49f4-96d9-7be228ab6a09")
                        },
                        new
                        {
                            UserProfileId = new Guid("17de54da-b918-47e5-affd-ade34970751c"),
                            Address = "User4 Address",
                            FirstName = "User",
                            LastName = "Four",
                            Phone = "5555555555",
                            UserId = new Guid("7e595c7f-1e5b-4b17-9692-a4df53985a1e")
                        });
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.UserSurvey", b =>
                {
                    b.Property<Guid>("UserSurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserSurveyId");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSurveys");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Option", b =>
                {
                    b.HasOne("SurveyManagement.Domain.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Question", b =>
                {
                    b.HasOne("SurveyManagement.Domain.Entities.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Response", b =>
                {
                    b.HasOne("SurveyManagement.Domain.Entities.Option", "Option")
                        .WithMany("Responses")
                        .HasForeignKey("OptionId");

                    b.HasOne("SurveyManagement.Domain.Entities.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyManagement.Domain.Entities.UserSurvey", "UserSurvey")
                        .WithMany("Responses")
                        .HasForeignKey("UserSurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Question");

                    b.Navigation("UserSurvey");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Survey", b =>
                {
                    b.HasOne("SurveyManagement.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CreatedSurveys")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyManagement.Domain.Entities.Product", "Product")
                        .WithMany("Surveys")
                        .HasForeignKey("ProductId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("SurveyManagement.Domain.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("SurveyManagement.Domain.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.UserSurvey", b =>
                {
                    b.HasOne("SurveyManagement.Domain.Entities.Survey", "Survey")
                        .WithMany("UserSurveys")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyManagement.Domain.Entities.User", "User")
                        .WithMany("UserSurveys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Option", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Product", b =>
                {
                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.Survey", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserSurveys");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedSurveys");

                    b.Navigation("Profile");

                    b.Navigation("UserSurveys");
                });

            modelBuilder.Entity("SurveyManagement.Domain.Entities.UserSurvey", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
